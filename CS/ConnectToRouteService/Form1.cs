using DevExpress.XtraMap;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace ConnectToRouteService {
    public partial class Form1 : Form {
        const string bingKey = "YourBingKeyHere";
        InformationLayer RouteLayer { get { return (InformationLayer)mapControl1.Layers["RouteLayer"]; } }
        BingRouteDataProvider RouteProvider { get { return (BingRouteDataProvider)RouteLayer.DataProvider; } }

        public Form1() {
            InitializeComponent();
            RouteLayer.DataProvider = new BingRouteDataProvider() { BingKey = bingKey };
        }

        MapItemStorage storage = new MapItemStorage();

        private void Form1_Load(object sender, System.EventArgs e) {
            #region #Waypoints
            // Create three waypoints and add them to a route waypoints list. 
            List<RouteWaypoint> waypoints = new List<RouteWaypoint>();
            waypoints.Add(new RouteWaypoint("New York", new GeoPoint(41.145556, -73.995)));
            waypoints.Add(new RouteWaypoint("Oklahoma", new GeoPoint(36.131389, -95.937222)));
            waypoints.Add(new RouteWaypoint("Las Vegas", new GeoPoint(36.175, -115.136389)));

            // Handle the BingRouteDataProvider.LayerItemsGenerating event.
            RouteProvider.LayerItemsGenerating += routeLayerItemsGenerating;
            RouteProvider.RouteCalculated += RouteProvider_RouteCalculated;
            RouteLayer.DataRequestCompleted += RouteLayer_DataRequestCompleted;
            RouteProvider.GenerateLayerItems = false;

            // Call the BingRouteDataProvider.CalculateRoute method.
            RouteProvider.CalculateRoute(waypoints);
            #endregion #Waypoints

            mapControl1.Layers.Add(new VectorItemsLayer { Data = storage });
        }

        private void RouteProvider_RouteCalculated(object sender, BingRouteCalculatedEventArgs e) {
            RouteCalculationResult result = e.CalculationResult;
            if (result.ResultCode != RequestResultCode.Success) return;

            MapPolyline polyline = new MapPolyline();
            polyline.Points.AddRange(result.RouteResults[0].RoutePath);

            // Customize the appearance of the calculated route path. 
            polyline.Stroke = Color.FromArgb(0xFF, 0xFE, 0x72, 0xFF);
            polyline.StrokeWidth = 4;

            storage.Items.Clear();
            storage.Items.Add(polyline);
        }

        #region #DataRequestCompleted
        void RouteLayer_DataRequestCompleted(object sender, RequestCompletedEventArgs e) {
            // Adjust the Map Control's zoom level and center point.
            mapControl1.ZoomToFitLayerItems();
        }
        #endregion #DataRequestCompleted

        #region #LayerItemsGenerating
        private void routeLayerItemsGenerating(object sender, LayerItemsGeneratingEventArgs e) {
            // Customuze autogenerated items.
            if (e.Cancelled || (e.Error != null)) return;

            foreach (MapItem item in e.Items) {
                MapPolyline polyline = item as MapPolyline;
                if (polyline != null) {
                    polyline.Stroke = Color.FromArgb(0xFF, 0xCC, 0x1C, 0x1C);
                    polyline.StrokeWidth = 4;
                }
            }
        }
        #endregion #LayerItemsGenerating
    }
}